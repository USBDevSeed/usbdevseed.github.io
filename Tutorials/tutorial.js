let burgerIcon = document.querySelector('.burgerIcon');
let imgVisibilityIcon = document.querySelector('.imgVisibilityIcon');
let tutorialSidebar = document.querySelector('.tutorialSidebar');
let navbar = document.querySelector('.tutorialSidebarNav');
let headings = document.querySelectorAll('h1, h2');
let accordions = document.querySelectorAll('.accordion');
let accordionsHeadings = document.querySelectorAll('.accordionHeading');

let tutorialDiv = document.querySelector('.tutorialDiv')
let images = document.querySelectorAll('img');

window.addEventListener('DOMContentLoaded', ()=>{
    /* Zoom on images */
    images.forEach((img) => {
        img.addEventListener("click", function(){onImgClicked(img)});
    });

    var lastHeadingIdx = -1;
    var lastHeadingAccordionContainer;
    var lastSubHeading;
    var subHeadingCount = 0;
    /* Automatic heading navigation on sidebar */
    headings.forEach((heading, idx) => {
        if(heading.tagName == 'H1'){
            lastHeadingIdx++;
            subHeadingCount = 0;
            heading.id = 'heading' + String(lastHeadingIdx);

            /* Creation of accordion */
            const accordionInstance = document.createElement("div");
            accordionInstance.classList.add('accordion');
            navbar.appendChild(accordionInstance);

            /*Accordion heading*/
            const accordionHeadingInstance = document.createElement("a");
            accordionHeadingInstance.classList.add('accordionHeading');
            accordionHeadingInstance.textContent = heading.textContent;
            accordionHeadingInstance.href = '#heading' + String(lastHeadingIdx);
            accordionHeadingInstance.addEventListener("click", function(){onNavbarHeadingClicked(heading)});
            accordionInstance.appendChild(accordionHeadingInstance);
            accordionHeadingInstance.addEventListener("click", function(){onAccordionClicked(accordionInstance)});

            /*Accordion Container*/
            const accordionContainer = document.createElement("div");
            accordionContainer.classList.add("accordionContainer");
            lastHeadingAccordionContainer = accordionContainer;
            accordionInstance.appendChild(accordionContainer);

        }
        else if(heading.tagName == 'H2'){
            subHeadingCount++;
            heading.id = 'heading' + String(lastHeadingIdx) + "_" + String(subHeadingCount);

            /*Accordion content */
            const subHeading = document.createElement("a");
            subHeading.textContent = heading.textContent;
            subHeading.href = '#heading' + String(lastHeadingIdx) + "_" + String(subHeadingCount);
            subHeading.classList.add('accordionSubHeading');
            subHeading.addEventListener("click", function(){onNavbarHeadingClicked(heading)});
            lastHeadingAccordionContainer.appendChild(subHeading);

            lastSubHeading = heading;
        }
    });

    /* Accordion */
    accordions.forEach((accordion,idx) => {
        var accordionHeading = accordion.querySelector('.accordionHeading');
        if(accordionHeading != null){
            accordionHeading.addEventListener("click", function(){onAccordionClicked(accordion)});
        }
    });

});

function onNavbarBurgerIconClicked() {
    if(tutorialSidebar.classList.contains('closed')){
        tutorialSidebar.classList.remove('closed');
        burgerIcon.classList.remove('closed');
        tutorialDiv.classList.remove('center');
    }
    else{
        tutorialSidebar.classList.add('closed');
        burgerIcon.classList.add('closed');
        tutorialDiv.classList.add('center');
    }
}

function onAccordionClicked(accordionClicked){
    var accordionContainer = accordionClicked.querySelector('.accordionContainer');
    if(accordionContainer.classList.contains('display')){
        accordionContainer.classList.remove('display');
        //accordionContainer.style.height = '0px';

        /*//Check if nested accordion
        if(nestedAccordionParent.className != "accordion"){
            return;
        }
        var nestedAccordionParentContainer = nestedAccordionParent.querySelector('.accordionContainer');
        //Erase the offset if its a nested accordion
        var offset = 0;
        var nestedAccordions = nestedAccordionParent.querySelectorAll('.accordionContainer');
        nestedAccordions.forEach((accordion => {
            offset += accordion.scrollHeight;
        }));
        nestedAccordionParent.style.height = (nestedAccordionParent.scrollHeight - offset) + 'px';*/
    }
    else{
        accordionContainer.classList.add('display');

        //Calculate the offset generated by other nested accordions inside
        //var offset = 0;
        /*var nestedAccordions = accordionContainer.querySelectorAll('.accordionContainer');
        if(nestedAccordions.length != 0){
            nestedAccordions.forEach((accordion => {
                offset += accordion.scrollHeight;
            }));
        }*/
        //accordionContainer.style.height = (accordionContainer.scrollHeight - offset) + 'px';

        /*//Check if nested accordion
        if(nestedAccordionParent.className != "accordion"){
            return;
        }
        var nestedAccordionParentContainer = nestedAccordionParent.querySelector('.accordionContainer');
        //Expand the accordion parent if nested
        //This is a REALLY ugly solution but i need it to expand dinamically
        //var nestedAccordionParentScrollHeight = nestedAccordionParent.style.height;
        var parentScrollHeight = parseFloat(getComputedStyle(nestedAccordionParentContainer).width);
        nestedAccordionParentContainer.style.height = (parentScrollHeight + accordionContainer.scrollHeight) + 'px';*/
    }
}

function onNavbarHeadingClicked(heading){
    //Display accordion
    if(heading.parentElement.className == "accordion"){
        heading.parentElement.querySelector(".accordionContainer").classList.add('display');
    }

    //Display parent accordion if its a subheading
    if(heading.parentElement.parentElement.className == "accordionContainer"){
        heading.parentElement.parentElement.classList.add('display');
    }


}

function toggleImgVisibility(){
    if(images[0].classList.contains('hidden')){
        images.forEach((img) => {
            img.classList.remove('hidden');
            imgVisibilityIcon.src = "../../Assets/Icons/images_show.png"
        });
    }
    else{
        images.forEach((img) => {
            img.classList.add('hidden');
            imgVisibilityIcon.src = "../../Assets/Icons/images_hidden.png"
        });
    }
}

function onImgClicked(clickedIMG){
    /* Remove the zoom from any image if applied */
    images.forEach((img) => {
        if(img.classList.contains('zoom') && img != clickedIMG) {
            img.classList.remove('zoom');
        }
    });

    if(clickedIMG.classList.contains('zoom')){
        clickedIMG.classList.remove('zoom');
    }else{
        clickedIMG.classList.add('zoom');
    }
}

function onReturnClicked(){
    window.location.href = '../../index.html'
}